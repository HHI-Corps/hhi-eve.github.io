/* src\components\chars\Add.svelte generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text
} from "/web_modules/svelte/internal.js";

import { createEventDispatcher } from "/web_modules/svelte.js";
import { charAdd } from "../../api/index.js";

function create_fragment(ctx) {
	let div7;
	let div6;
	let div5;
	let div0;
	let t3;
	let div4;
	let section0;
	let div1;
	let label;
	let t5;
	let input;
	let t6;
	let button1;
	let t8;
	let section1;
	let div2;
	let t10;
	let div3;
	let t11;
	let mounted;
	let dispose;

	return {
		c() {
			div7 = element("div");
			div6 = element("div");
			div5 = element("div");
			div0 = element("div");

			div0.innerHTML = `<h5 class="modal-title" id="addCharDialogLabel">添加关联角色</h5> 
                <button type="button" class="close" data-dismiss="modal" aria-label="关闭"><span aria-hidden="true">×</span></button>`;

			t3 = space();
			div4 = element("div");
			section0 = element("section");
			div1 = element("div");
			label = element("label");
			label.textContent = "角色名称";
			t5 = space();
			input = element("input");
			t6 = space();
			button1 = element("button");
			button1.textContent = "确定";
			t8 = space();
			section1 = element("section");
			div2 = element("div");
			div2.textContent = " ";
			t10 = space();
			div3 = element("div");
			t11 = text(/*message*/ ctx[1]);
			attr(div0, "class", "modal-header");
			attr(label, "for", "char_name");
			attr(label, "class", "form-label");
			attr(input, "type", "text");
			attr(input, "class", "form-control");
			attr(input, "id", "char_name");
			attr(div1, "class", "mb-3");
			attr(button1, "type", "button");
			attr(button1, "class", "btn btn-primary");
			attr(div4, "class", "modal-body");
			attr(div5, "class", "modal-content");
			attr(div6, "class", "modal-dialog");
			attr(div7, "class", "modal fade");
			attr(div7, "id", "addCharDialog");
			attr(div7, "tabindex", "-1");
			attr(div7, "aria-labelledby", "addCharDialogLabel");
			attr(div7, "aria-hidden", "true");
		},
		m(target, anchor) {
			insert(target, div7, anchor);
			append(div7, div6);
			append(div6, div5);
			append(div5, div0);
			append(div5, t3);
			append(div5, div4);
			append(div4, section0);
			append(section0, div1);
			append(div1, label);
			append(div1, t5);
			append(div1, input);
			set_input_value(input, /*char_name*/ ctx[0]);
			append(section0, t6);
			append(section0, button1);
			append(div4, t8);
			append(div4, section1);
			append(section1, div2);
			append(section1, t10);
			append(section1, div3);
			append(div3, t11);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler*/ ctx[3]),
					listen(button1, "click", /*handleAdd*/ ctx[2])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*char_name*/ 1 && input.value !== /*char_name*/ ctx[0]) {
				set_input_value(input, /*char_name*/ ctx[0]);
			}

			if (dirty & /*message*/ 2) set_data(t11, /*message*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div7);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let char_name;
	let message = "";
	const dispatch = createEventDispatcher();

	function success() {
		$$invalidate(0, char_name = undefined);
		$$invalidate(1, message = "");
		dispatch("success");
	}

	async function handleAdd() {
		try {
			const r = await charAdd(char_name);
			$$invalidate(1, message = r.data);
			setTimeout(success, 1000);
		} catch(error) {
			if (error.response) $$invalidate(1, message = error.response.data); else $$invalidate(1, message = error);
		}
	}

	function input_input_handler() {
		char_name = this.value;
		$$invalidate(0, char_name);
	}

	return [char_name, message, handleAdd, input_input_handler];
}

class Add extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Add;