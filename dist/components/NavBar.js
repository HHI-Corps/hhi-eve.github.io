/* src\components\NavBar.svelte generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "/web_modules/svelte/internal.js";

import { onMount } from "/web_modules/svelte.js";
import XEUtils from "/web_modules/xe-utils.js";
import Login from "./Login.js";
import * as api from "../api/index.js";

function create_if_block_1(ctx) {
	let li;

	return {
		c() {
			li = element("li");
			li.innerHTML = `<a class="nav-link" href="/chars">角色管理</a>`;
			attr(li, "class", "nav-item");
		},
		m(target, anchor) {
			insert(target, li, anchor);
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (65:12) {:else}
function create_else_block(ctx) {
	let button;
	let t1;
	let a;

	return {
		c() {
			button = element("button");
			button.textContent = "登录";
			t1 = space();
			a = element("a");
			a.textContent = "注册";
			attr(button, "type", "button");
			attr(button, "class", "btn btn-primary");
			attr(button, "data-toggle", "modal");
			attr(button, "data-target", "#loginDialog");
			attr(a, "class", "nav-link active");
			attr(a, "href", "/register");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			insert(target, t1, anchor);
			insert(target, a, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button);
			if (detaching) detach(t1);
			if (detaching) detach(a);
		}
	};
}

// (61:12) {#if active}
function create_if_block(ctx) {
	let span0;
	let t0;
	let t1;
	let t2;
	let span1;
	let t4;
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			span0 = element("span");
			t0 = text("当前用户：");
			t1 = text(/*username*/ ctx[1]);
			t2 = space();
			span1 = element("span");
			span1.textContent = " ";
			t4 = space();
			button = element("button");
			button.textContent = "退出";
			attr(button, "type", "button");
			attr(button, "class", "btn btn-primary");
		},
		m(target, anchor) {
			insert(target, span0, anchor);
			append(span0, t0);
			append(span0, t1);
			insert(target, t2, anchor);
			insert(target, span1, anchor);
			insert(target, t4, anchor);
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*handleLogout*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*username*/ 2) set_data(t1, /*username*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(span0);
			if (detaching) detach(t2);
			if (detaching) detach(span1);
			if (detaching) detach(t4);
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let nav;
	let div1;
	let a0;
	let t1;
	let button;
	let t2;
	let div0;
	let ul;
	let li;
	let t4;
	let t5;
	let t6;
	let login;
	let current;
	let if_block0 = /*active*/ ctx[0] && create_if_block_1(ctx);

	function select_block_type(ctx, dirty) {
		if (/*active*/ ctx[0]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block1 = current_block_type(ctx);
	login = new Login({});
	login.$on("success", /*handleLoginSuccess*/ ctx[2]);

	return {
		c() {
			nav = element("nav");
			div1 = element("div");
			a0 = element("a");
			a0.textContent = "HHI - EVE";
			t1 = space();
			button = element("button");
			button.innerHTML = `<span class="navbar-toggler-icon"></span>`;
			t2 = space();
			div0 = element("div");
			ul = element("ul");
			li = element("li");
			li.innerHTML = `<a class="nav-link active" aria-current="page" href="/">首页</a>`;
			t4 = space();
			if (if_block0) if_block0.c();
			t5 = space();
			if_block1.c();
			t6 = space();
			create_component(login.$$.fragment);
			attr(a0, "class", "navbar-brand");
			attr(a0, "href", "/");
			attr(button, "class", "navbar-toggler");
			attr(button, "type", "button");
			attr(button, "data-toggle", "collapse");
			attr(button, "data-target", "#navbarSupportedContent");
			attr(button, "aria-controls", "navbarSupportedContent");
			attr(button, "aria-expanded", "false");
			attr(button, "aria-label", "Toggle navigation");
			attr(li, "class", "nav-item");
			attr(ul, "class", "navbar-nav mr-auto mb-2 mb-lg-0");
			attr(div0, "class", "collapse navbar-collapse");
			attr(div0, "id", "navbarSupportedContent");
			attr(div1, "class", "container-fluid");
			attr(nav, "class", "navbar navbar-expand-lg navbar-light bg-light");
		},
		m(target, anchor) {
			insert(target, nav, anchor);
			append(nav, div1);
			append(div1, a0);
			append(div1, t1);
			append(div1, button);
			append(div1, t2);
			append(div1, div0);
			append(div0, ul);
			append(ul, li);
			append(ul, t4);
			if (if_block0) if_block0.m(ul, null);
			append(div0, t5);
			if_block1.m(div0, null);
			insert(target, t6, anchor);
			mount_component(login, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*active*/ ctx[0]) {
				if (if_block0) {
					
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(ul, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div0, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(login.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(login.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(nav);
			if (if_block0) if_block0.d();
			if_block1.d();
			if (detaching) detach(t6);
			destroy_component(login, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let active = false;
	let username = "";

	function getLoginInfo() {
		$$invalidate(0, active = XEUtils.cookie("active") === "true" ? true : false);
		$$invalidate(1, username = XEUtils.cookie("username"));
	}

	function handleLoginSuccess() {
		let loginDialogEl = document.getElementById("loginDialog");
		let modal = bootstrap.Modal.getInstance(loginDialogEl);
		modal.hide();
		getLoginInfo();
	}

	async function handleLogout() {
		try {
			await api.logout();
			XEUtils.cookie("active", null, { expires: -1 });
			$$invalidate(0, active = false);
		} catch(error) {
			
		}
	}

	onMount(async () => {
		getLoginInfo();
	});

	return [active, username, handleLoginSuccess, handleLogout];
}

class NavBar extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default NavBar;