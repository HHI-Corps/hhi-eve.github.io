/* src\components\chars\Donation.svelte generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text
} from "/web_modules/svelte/internal.js";

import { createEventDispatcher } from "/web_modules/svelte.js";
import XEUtils from "/web_modules/xe-utils.js";
import { charDonate } from "../../api/index.js";

function create_fragment(ctx) {
	let div8;
	let div7;
	let div6;
	let div0;
	let t3;
	let div5;
	let section0;
	let div1;
	let label0;
	let t5;
	let input;
	let t6;
	let div2;
	let label1;
	let t8;
	let textarea;
	let t9;
	let button1;
	let t11;
	let section1;
	let div3;
	let t13;
	let div4;
	let t14;
	let mounted;
	let dispose;

	return {
		c() {
			div8 = element("div");
			div7 = element("div");
			div6 = element("div");
			div0 = element("div");

			div0.innerHTML = `<h5 class="modal-title" id="donationDialogLabel">捐献资源</h5> 
                <button type="button" class="close" data-dismiss="modal" aria-label="关闭"><span aria-hidden="true">×</span></button>`;

			t3 = space();
			div5 = element("div");
			section0 = element("section");
			div1 = element("div");
			label0 = element("label");
			label0.textContent = "ISK";
			t5 = space();
			input = element("input");
			t6 = space();
			div2 = element("div");
			label1 = element("label");
			label1.textContent = "备注";
			t8 = space();
			textarea = element("textarea");
			t9 = space();
			button1 = element("button");
			button1.textContent = "确定";
			t11 = space();
			section1 = element("section");
			div3 = element("div");
			div3.textContent = " ";
			t13 = space();
			div4 = element("div");
			t14 = text(/*message*/ ctx[2]);
			attr(div0, "class", "modal-header");
			attr(label0, "for", "isk");
			attr(label0, "class", "form-label");
			attr(input, "type", "text");
			attr(input, "class", "form-control");
			attr(input, "id", "isk");
			attr(div1, "class", "mb-3");
			attr(label1, "for", "comment");
			attr(label1, "class", "form-label");
			attr(textarea, "class", "form-control");
			attr(textarea, "id", "comment");
			attr(textarea, "rows", "2");
			attr(div2, "class", "mb-3");
			attr(button1, "type", "button");
			attr(button1, "class", "btn btn-primary");
			attr(div5, "class", "modal-body");
			attr(div6, "class", "modal-content");
			attr(div7, "class", "modal-dialog");
			attr(div8, "class", "modal fade");
			attr(div8, "id", "donationDialog");
			attr(div8, "tabindex", "-1");
			attr(div8, "aria-labelledby", "donationDialogLabel");
			attr(div8, "aria-hidden", "true");
		},
		m(target, anchor) {
			insert(target, div8, anchor);
			append(div8, div7);
			append(div7, div6);
			append(div6, div0);
			append(div6, t3);
			append(div6, div5);
			append(div5, section0);
			append(section0, div1);
			append(div1, label0);
			append(div1, t5);
			append(div1, input);
			set_input_value(input, /*isk*/ ctx[0]);
			append(section0, t6);
			append(section0, div2);
			append(div2, label1);
			append(div2, t8);
			append(div2, textarea);
			set_input_value(textarea, /*comment*/ ctx[1]);
			append(section0, t9);
			append(section0, button1);
			append(div5, t11);
			append(div5, section1);
			append(section1, div3);
			append(section1, t13);
			append(section1, div4);
			append(div4, t14);

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler*/ ctx[5]),
					listen(textarea, "input", /*textarea_input_handler*/ ctx[6]),
					listen(button1, "click", /*handleDonate*/ ctx[3])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*isk*/ 1 && input.value !== /*isk*/ ctx[0]) {
				set_input_value(input, /*isk*/ ctx[0]);
			}

			if (dirty & /*comment*/ 2) {
				set_input_value(textarea, /*comment*/ ctx[1]);
			}

			if (dirty & /*message*/ 4) set_data(t14, /*message*/ ctx[2]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div8);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { char_id } = $$props;
	let isk;
	let comment;
	let message = "";
	const dispatch = createEventDispatcher();

	function success() {
		$$invalidate(0, isk = undefined);
		$$invalidate(2, message = "");
		dispatch("success");
	}

	async function handleDonate() {
		let isk_n = XEUtils.toNumber(isk);

		if (isk === undefined || isk_n === 0) {
			$$invalidate(2, message = "你总得捐点吧？");
			return;
		}

		if (isk_n < 0 && (comment === undefined || comment.length === 0)) {
			$$invalidate(2, message = "要支取资源必须填写备注。");
			return;
		}

		try {
			const r = await charDonate(char_id, isk, comment);
			$$invalidate(2, message = r.data);
			setTimeout(success, 1000);
		} catch(error) {
			if (error.response) $$invalidate(2, message = error.response.data); else $$invalidate(2, message = error);
		}
	}

	function input_input_handler() {
		isk = this.value;
		$$invalidate(0, isk);
	}

	function textarea_input_handler() {
		comment = this.value;
		$$invalidate(1, comment);
	}

	$$self.$set = $$props => {
		if ("char_id" in $$props) $$invalidate(4, char_id = $$props.char_id);
	};

	return [
		isk,
		comment,
		message,
		handleDonate,
		char_id,
		input_input_handler,
		textarea_input_handler
	];
}

class Donation extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { char_id: 4 });
	}
}

export default Donation;