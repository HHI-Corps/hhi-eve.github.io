/* src\pages\Characters.svelte generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	init,
	insert,
	is_function,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "/web_modules/svelte/internal.js";

import { onMount } from "/web_modules/svelte.js";
import moment from "/web_modules/moment.js";
import { charById, charAdd, charRemove } from "../api/index.js";
import Add from "../components/chars/Add.js";
import Donation from "../components/chars/Donation.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	child_ctx[12] = i;
	return child_ctx;
}

// (71:12) {#each data as entry, i}
function create_each_block(ctx) {
	let tr;
	let th;
	let t0_value = /*entry*/ ctx[10].char_id + "";
	let t0;
	let t1;
	let td0;
	let t2_value = /*entry*/ ctx[10].name + "";
	let t2;
	let t3;
	let td1;
	let t4_value = /*entry*/ ctx[10].isk + "";
	let t4;
	let t5;
	let td2;
	let t6_value = moment(/*entry*/ ctx[10].update_time).local().format("YYYY-M-D HH:mm:ss") + "";
	let t6;
	let t7;
	let td3;
	let div;
	let button0;
	let t9;
	let button1;
	let t11;
	let mounted;
	let dispose;

	return {
		c() {
			tr = element("tr");
			th = element("th");
			t0 = text(t0_value);
			t1 = space();
			td0 = element("td");
			t2 = text(t2_value);
			t3 = space();
			td1 = element("td");
			t4 = text(t4_value);
			t5 = space();
			td2 = element("td");
			t6 = text(t6_value);
			t7 = space();
			td3 = element("td");
			div = element("div");
			button0 = element("button");
			button0.textContent = "捐献资源";
			t9 = space();
			button1 = element("button");
			button1.textContent = "解除关联";
			t11 = space();
			attr(th, "scope", "row");
			attr(button0, "type", "button");
			attr(button0, "class", "btn btn-outline-primary btn-sm");
			attr(button1, "type", "button");
			attr(button1, "class", "btn btn-outline-danger btn-sm");
			attr(div, "class", "btn-group");
			attr(div, "role", "group");
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			append(tr, th);
			append(th, t0);
			append(tr, t1);
			append(tr, td0);
			append(td0, t2);
			append(tr, t3);
			append(tr, td1);
			append(td1, t4);
			append(tr, t5);
			append(tr, td2);
			append(td2, t6);
			append(tr, t7);
			append(tr, td3);
			append(td3, div);
			append(div, button0);
			append(div, t9);
			append(div, button1);
			append(tr, t11);

			if (!mounted) {
				dispose = [
					listen(button0, "click", function () {
						if (is_function(/*showDonationDialog*/ ctx[3](/*entry*/ ctx[10].char_id))) /*showDonationDialog*/ ctx[3](/*entry*/ ctx[10].char_id).apply(this, arguments);
					}),
					listen(button1, "click", function () {
						if (is_function(/*handleRemoveChar*/ ctx[6](/*entry*/ ctx[10].char_id))) /*handleRemoveChar*/ ctx[6](/*entry*/ ctx[10].char_id).apply(this, arguments);
					})
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*data*/ 1 && t0_value !== (t0_value = /*entry*/ ctx[10].char_id + "")) set_data(t0, t0_value);
			if (dirty & /*data*/ 1 && t2_value !== (t2_value = /*entry*/ ctx[10].name + "")) set_data(t2, t2_value);
			if (dirty & /*data*/ 1 && t4_value !== (t4_value = /*entry*/ ctx[10].isk + "")) set_data(t4, t4_value);
			if (dirty & /*data*/ 1 && t6_value !== (t6_value = moment(/*entry*/ ctx[10].update_time).local().format("YYYY-M-D HH:mm:ss") + "")) set_data(t6, t6_value);
		},
		d(detaching) {
			if (detaching) detach(tr);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let section;
	let div0;
	let t1;
	let div1;
	let button;
	let t3;
	let table;
	let thead;
	let t13;
	let tbody;
	let t14;
	let add;
	let t15;
	let donation;
	let current;
	let mounted;
	let dispose;
	let each_value = /*data*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	add = new Add({});
	add.$on("success", /*handleAdded*/ ctx[4]);
	donation = new Donation({ props: { char_id: /*char_id*/ ctx[1] } });
	donation.$on("success", /*handleDonated*/ ctx[5]);

	return {
		c() {
			section = element("section");
			div0 = element("div");
			div0.innerHTML = `<h1>角色管理</h1>`;
			t1 = space();
			div1 = element("div");
			button = element("button");
			button.textContent = "添加角色";
			t3 = space();
			table = element("table");
			thead = element("thead");

			thead.innerHTML = `<tr><th scope="col">#</th> 
                <th scope="col">角色名</th> 
                <th scope="col">ISK</th> 
                <th scope="col">更新时间</th> 
                <th scope="col">操作</th></tr>`;

			t13 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t14 = space();
			create_component(add.$$.fragment);
			t15 = space();
			create_component(donation.$$.fragment);
			attr(button, "class", "btn btn-outline-primary");
			attr(table, "class", "table table-striped table-hover");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div0);
			append(section, t1);
			append(section, div1);
			append(div1, button);
			append(section, t3);
			append(section, table);
			append(table, thead);
			append(table, t13);
			append(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}

			insert(target, t14, anchor);
			mount_component(add, target, anchor);
			insert(target, t15, anchor);
			mount_component(donation, target, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*showAddCharDialog*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*handleRemoveChar, data, showDonationDialog, moment*/ 73) {
				each_value = /*data*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			const donation_changes = {};
			if (dirty & /*char_id*/ 2) donation_changes.char_id = /*char_id*/ ctx[1];
			donation.$set(donation_changes);
		},
		i(local) {
			if (current) return;
			transition_in(add.$$.fragment, local);
			transition_in(donation.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(add.$$.fragment, local);
			transition_out(donation.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(section);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t14);
			destroy_component(add, detaching);
			if (detaching) detach(t15);
			destroy_component(donation, detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let data = [];
	let char_id = -1;
	let addDialog;
	let donationDialog;

	onMount(async () => {
		await loadChars();
		addDialog = new bootstrap.Modal(document.getElementById("addCharDialog"));
		donationDialog = new bootstrap.Modal(document.getElementById("donationDialog"));
	});

	async function loadChars() {
		const res = await charById("");
		$$invalidate(0, data = res.data);
	}

	function showAddCharDialog() {
		if (addDialog !== undefined) addDialog.show();
	}

	function showDonationDialog(cur_cid) {
		$$invalidate(1, char_id = cur_cid);
		if (donationDialog !== undefined) donationDialog.show();
	}

	async function handleAdded() {
		if (addDialog !== undefined) addDialog.hide();
		await loadChars();
	}

	async function handleDonated() {
		if (donationDialog !== undefined) donationDialog.hide();
		await loadChars();
	}

	async function handleRemoveChar(cur_cid) {
		await charRemove(cur_cid);
		await loadChars();
	}

	return [
		data,
		char_id,
		showAddCharDialog,
		showDonationDialog,
		handleAdded,
		handleDonated,
		handleRemoveChar
	];
}

class Characters extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Characters;